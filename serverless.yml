service: ebook-store-api

frameworkVersion: '2'

custom:
  settings:
    PRODUCTS_TABLE: products
    USERS_TABLE: users
    ORDERS_TABLE: orders
    IMAGE_UPLOAD_BUCKET: book-image-upload-bucket-2809

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  apiGateway:
    shouldStartNameWithService: true
  lambdaHashingVersion: 20201221
  environment:
    PRODUCTS_TABLE: ${self:custom.settings.PRODUCTS_TABLE}
    USERS_TABLE: ${self:custom.settings.USERS_TABLE}
    ORDERS_TABLE: ${self:custom.settings.ORDERS_TABLE}
    JWT_SECRET: "ThisShipHasSailed"
    IMAGE_UPLOAD_BUCKET: ${self:custom.settings.IMAGE_UPLOAD_BUCKET}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
            - s3:*
            - ses:*
          Resource: '*'

functions:
  isAuth:
    handler: src/utils/isAuth.isAuth
  getBooks:
    handler: src/functions/shop.getBooks
    events:
      - http:
          path: getBooks
          method: GET
          cors: true
  getBook:
    handler: src/functions/shop.getBook
    events:
    - http:
        path: /getBook/{id}
        method: GET
        cors: true
  signUp:
    handler: src/functions/auth.signUp
    events:
      - http:
          path: signup
          method: POST
          cors: true
  login:
    handler: src/functions/auth.login
    events:
      - http:
          path: login
          method: POST
          cors: true
  profile:
    handler: src/functions/auth.profile
    events:
      - http:
          path: profile
          method: GET
          cors: true
          authorizer: isAuth
  updateProfile:
    handler: src/functions/auth.updateProfile
    events:
      - http:
          path: updateProfile
          method: PUT
          cors: true
          authorizer: isAuth
  getSellerBooks:
    handler: src/functions/shop.getSellerBooks
    events:
      - http:
          path: getSellerBooks
          method: GET
          cors: true
          authorizer: isAuth
  addBook:
    handler: src/functions/shop.addBook
    events:
      - http:
          path: addBook
          method: POST
          cors: true
          authorizer: isAuth
  updateBook:
    handler: src/functions/shop.updateBook
    events:
    - http:
        path: /updateBook/{id}
        method: PUT
        cors: true
        authorizer: isAuth
  deleteBook:
    handler: src/functions/shop.deleteBook
    events:
    - http:
        path: /deleteBook/{id}
        method: DELETE
        cors: true
        authorizer: isAuth
  getCart:
    handler: src/functions/cart.getCart
    events:
    - http:
        path: /getCart
        method: GET
        cors: true
        authorizer: isAuth
  addToCart:
    handler: src/functions/cart.addToCart
    events:
    - http:
        path: /addToCart/{id}
        method: POST
        cors: true
        authorizer: isAuth
  removeFromCart:
    handler: src/functions/cart.removeFromCart
    events:
    - http:
        path: /removeFromCart/{id}
        method: DELETE
        cors: true
        authorizer: isAuth
  clearCart:
    handler: src/functions/cart.clearCart
    events:
    - http:
        path: /clearCart
        method: DELETE
        cors: true
        authorizer: isAuth
  postOrder:
    handler: src/functions/order.postOrder
    events:
    - http:
        path: /postOrder
        method: POST
        cors: true
        authorizer: isAuth
  getOrders:
    handler: src/functions/order.getOrders
    events:
    - http:
        path: /getOrders
        method: GET
        cors: true
        authorizer: isAuth

  sendOTP:
    handler: src/functions/auth.sendOTP
    events:
    - http:
        path: /sendOTP
        method: POST
        cors: true

  verifyOTP:
    handler: src/functions/auth.verifyOTP
    events:
    - http:
        path: /verifyOTP
        method: POST
        cors: true

  resetPassword:
    handler: src/functions/auth.resetPassword
    events:
    - http:
        path: /resetPassword
        method: POST
        cors: true
  
  getInvoice:
    handler: src/functions/order.getInvoice
    events:
    - http:
        path: /getInvoice/{id}
        method: get
        cors: true
        authorizer: isAuth

resources:
  Resources:
    ImageUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
          BucketName: book-image-upload-bucket-2809
          AccessControl: PublicRead

    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.settings.PRODUCTS_TABLE}
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.settings.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: "email"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "email"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.settings.ORDERS_TABLE}
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1